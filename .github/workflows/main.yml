name: Docker Build and Deploy

on:
  pull_request:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      DOCKER_BUILDKIT: 1

    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Build and run Docker Compose
      - name: Build and Test with Docker Compose
        run: |
          docker compose -f docker-compose.yml up --build --detach
          docker compose ps
          sleep 10 # Wait for services to stabilize
          docker compose logs || true
 
 # Accept the Pull Request if Successful
      - name: Merge Pull Request
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}
        run: |
          echo "Merging pull request #${{ github.event.pull_request.number }}..."
          gh pr merge ${{ github.event.pull_request.number }} --admin --merge --delete-branch

      # Reject the Pull Request if Failed
      - name: Reject Pull Request
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}
        run: |
          echo "Closing pull request #${{ github.event.pull_request.number }} due to build failure..."
          gh pr close ${{ github.event.pull_request.number }}
      # Push changes to the development branch if successful
      - name: Replace Development Branch with Master
        if: success()
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.event.pusher.email }}"
      
          # Fetch the latest branches
          git fetch origin
      
          # Switch to the master branch and ensure it's up to date
          git checkout master
          git pull origin master
      
          # Forcefully reset development to match master
          git branch -D development || true
          git checkout -b development
          git push origin development --force

      # Send email notification with status
      - name: Send Email Notification
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: Build Status - ${{ github.repository }}
          to: iyusuf023112@gmail.com, cinfotech1194@gmail.com
          body: |
            Hello ${{ github.actor }},

            Your push to the `master` branch has been processed.

            Build Status: ${{ job.status }}
            
            If successful, the changes have been pushed to the `development` branch.

            Regards,
            GitHub Actions Bot
          from: GitHub Actions <admin@ElectronicWaybill.com>

